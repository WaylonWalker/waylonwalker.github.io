<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>WaylonWalker</title><link href="www.waylonwalker.com/blog/" rel="alternate"></link><link href="www.waylonwalker.com/blog/feeds/all.atom.xml" rel="self"></link><id>www.waylonwalker.com/blog/</id><updated>2018-05-06T00:00:00-05:00</updated><entry><title>D3 Day 4</title><link href="www.waylonwalker.com/blog/d3-day-4.html" rel="alternate"></link><published>2018-05-06T00:00:00-05:00</published><updated>2018-05-06T00:00:00-05:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2018-05-06:www.waylonwalker.com/blog/d3-day-4.html</id><summary type="html">&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'&gt;&lt;/script&gt;

&lt;style&gt;
    #content{
        max-width: 800px;
        margin: 0 auto;
    }
    .chart {
        display: block;
        padding: 10px;
        background: peachpuff;
        transition: all 500ms
    }

    .bar {
        height: 30px;
        margin: 5px;
        background: teal;
    }
    .bar:hover{
        background: #444;
        }
    button {
        background: rgb(240, 196, 211);
        border: none;
        font-size: 1.3rem;
        border-radius: 5px;
        padding: .2rem 1rem;
        margin-bottom: 1rem
    }
    .on {
        background: palevioletred;
    }
    .big {
    width …&lt;/style&gt;</summary><content type="html">&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'&gt;&lt;/script&gt;

&lt;style&gt;
    #content{
        max-width: 800px;
        margin: 0 auto;
    }
    .chart {
        display: block;
        padding: 10px;
        background: peachpuff;
        transition: all 500ms
    }

    .bar {
        height: 30px;
        margin: 5px;
        background: teal;
    }
    .bar:hover{
        background: #444;
        }
    button {
        background: rgb(240, 196, 211);
        border: none;
        font-size: 1.3rem;
        border-radius: 5px;
        padding: .2rem 1rem;
        margin-bottom: 1rem
    }
    .on {
        background: palevioletred;
    }
    .big {
    width: 100%
    }
    .small {
    width: 50%
    }
&lt;/style&gt;

&lt;h2&gt;Learn D3 in 5 days&lt;/h2&gt;
&lt;h2&gt;Recall Example 3 from yesterday&lt;/h2&gt;
&lt;div id="chart3" class='chart'&gt;
    &lt;button class='math' onclick="render3('math')"&gt;Math&lt;/button&gt;
    &lt;button class='science' onclick="render3('science')"&gt;Science&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
    const data3 = [
        { name: 'Alice', math: 93, science: 84 },
        { name: 'Bob', math: 73, science: 82 },
        { name: 'James', math: 92, science: 78 },
        { name: 'Steve', math: 77, science: 93 },
        { name: 'Jordan', math: 80, science: 68 },
    ]

    function render3(subject) {
        d3.select('#chart3')
            .selectAll('button')
            .classed('on', false)
        d3.select('#chart3')
            .select('.' + subject)
            .attr('class', subject + ' on')

        const bars = d3.select('#chart3')
            .selectAll('div')
            .data(data3, function(d) {
                return d.name
            })
        const newBars = bars.enter()
            .append('div')
                .attr('class', 'bar')
                .style('width', 0)
        newBars.merge(bars)
            .transition()
            .style('width', function(d) {
                return (d[subject]) + 'px'
            })
    }
    render3('math')
&lt;/script&gt;

&lt;h2&gt;Add Scales&lt;/h2&gt;
&lt;p&gt;&lt;div id='buttons'&gt;
    &lt;h3&gt;Subject&lt;/h3&gt;
    &lt;div id='subjects'&gt;
        &lt;button class='math' onclick="render4('math')"&gt;Math&lt;/button&gt;
        &lt;button class='science' onclick="render4('science')"&gt;Science&lt;/button&gt;
    &lt;/div&gt;
    &lt;h3&gt;Chart Size&lt;/h3&gt;
    &lt;div id='sizes'&gt;
        &lt;button class='chart4-big-btn' onclick='chart4_size("big")')&gt;Large&lt;/button&gt;
        &lt;button class='chart4-small-btn' onclick='chart4_size("small")'&gt;Small&lt;/button&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div id="chart4" class='chart'&gt;&lt;/div&gt;

&lt;script&gt;
    const data4 = [
        { name: 'Alice', math: 93, science: 84},
        { name: 'Bob', math: 73, science: 82 },
        { name: 'James', math: 92, science: 78},
        { name: 'Steve', math: 77, science: 93 },
        { name: 'Jordan', math: 80, science: 68 },
    ]

    chart4 = document.getElementById('chart4')


    let width = function() {
        return chart4.getBoundingClientRect().width
        }
    let height = function() {
        return chart4.getBoundingClientRect().height
        }
    let barHeight = function() {
        height() /  data4.length + 'px'
        }

    function chart4_size(size) {
        d3.select('#sizes')
            .selectAll('button')
            .classed('on', false)
        d3.select('#sizes')
            .select('.chart4-' + size + '-btn')
            .classed('on', true)
        d3.select('#chart4')
            .attr('class', 'chart ' + size)
        subject = document.getElementById('subjects').querySelector('.on').classList[0]
        render4(subject)
    }

    function render4(subject) {

        d3.select('#subjects')
            .selectAll('button')
            .classed('on', false);

        d3.select('#subjects')
            .select('.' + subject)
            .attr('class', subject + ' on');

        let xScale = d3.scaleLinear()
            .domain([0, 100])
            .range([0, width()]);

        const bars = d3.select('#chart4')
            .selectAll('div')
            .data(data4, function(d) {
                return d.name
            })
        const newBars = bars.enter()
            .append('div')
                .attr('class', 'bar')
                .style('width', 0)

        newBars.merge(bars)
            .transition()
            .style('width', function(d) {
                return xScale(d[subject]) + 'px'
            })
            .style('height', barHeight())
    }
    render4('math')
    chart4_size('big')
&lt;/script&gt;</content><category term="D3"></category><category term="Viz"></category><category term="FrontEnd"></category></entry><entry><title>D3 Day 3</title><link href="www.waylonwalker.com/blog/d3-day-3.html" rel="alternate"></link><published>2018-05-05T00:00:00-05:00</published><updated>2018-05-05T00:00:00-05:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2018-05-05:www.waylonwalker.com/blog/d3-day-3.html</id><summary type="html">&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'&gt;&lt;/script&gt;

&lt;style&gt;
    #content{
        max-width: 800px;
        margin: 0 auto;
    }
    .chart {
        display: block;
        padding: 10px;
        background: peachpuff;
    }

    .bar {
        height: 30px;
        margin: 5px;
        background: teal;
    }
    button {
        background: rgb(240, 196, 211);
        border: none;
        font-size: 1.3rem;
        border-radius: 5px;
        padding: .2rem 1rem;
        margin-bottom: 1rem
    }
    .on {
        background: palevioletred;
    }
&lt;/style&gt;

&lt;h2&gt;Learn D3 in 5 days&lt;/h2&gt;
&lt;p&gt;I recently subscribed to …&lt;/p&gt;</summary><content type="html">&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js'&gt;&lt;/script&gt;

&lt;style&gt;
    #content{
        max-width: 800px;
        margin: 0 auto;
    }
    .chart {
        display: block;
        padding: 10px;
        background: peachpuff;
    }

    .bar {
        height: 30px;
        margin: 5px;
        background: teal;
    }
    button {
        background: rgb(240, 196, 211);
        border: none;
        font-size: 1.3rem;
        border-radius: 5px;
        padding: .2rem 1rem;
        margin-bottom: 1rem
    }
    .on {
        background: palevioletred;
    }
&lt;/style&gt;

&lt;h2&gt;Learn D3 in 5 days&lt;/h2&gt;
&lt;p&gt;I recently subscribed to Ben Clinkinbear's learn D3.js in 5 days, and am currently on day 3.  I read through the first 2 days, and felt fairly comfortable with selecting elements, so I did not follow along on the first two days.  I probably should have, but there are only so many hours in the day.&lt;/p&gt;
&lt;h3&gt;Why Learn D3&lt;/h3&gt;
&lt;p&gt;D3 is the ubiquitous dynamic visualization library for building custom interactive visualizations on the web.  It is a bit low level, and more verbose than many other libraries that build upon it, but if you want full control D3 is the way to go.  I have used a few libraries built upon d3 in the past and have been very happy with the results.  For now I want to start learning a bit about how d3 works.  I know that learning it is going to take a long time, so I want to start working on some simple examples now in order to build my understanding so that I can learn quickly when I am ready to dive in.  If I never decide I need to take the deep dive into d3, I think understanding how it works will only help when I am using higher level libraries.&lt;/p&gt;
&lt;h2&gt;Final Result&lt;/h2&gt;
&lt;p&gt;I cant express how fun it was to build this example. I always saw d3 as being super low level and that I could never build something in it.  It was so cool to watch the magic happen in such a short period of time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="final_result" src="/static/images/gifs/d3-day3.gif"&gt;&lt;/p&gt;
&lt;h2&gt;Prep&lt;/h2&gt;
&lt;h3&gt;Load D3&lt;/h3&gt;
&lt;p&gt;I am going to load d3 from the cloudflare cdn for simplicity&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    script src=&amp;#39;https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js&amp;#39;&amp;gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Base Styles&lt;/h3&gt;
&lt;p&gt;I will use this as by stylesheet throughout the examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        .chart {
            display: block;
            padding: 10px;
            background: peachpuff;
        }

        .bar {
            height: 30px;
            margin: 5px;
            background: teal;
        }
        button {
            background: rgb(240, 196, 211);
            border: none;
            font-size: 1.3rem;
            border-radius: 5px;
            padding: .2rem 1rem;
            margin-bottom: 1rem
        }
        .on {
            background: palevioletred;
        }
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Example one&lt;/h2&gt;
&lt;p&gt;This one is a bit cheaty in that it has the exact number of divs already rendered for us, but it is a good learning point
so see how to map data to attributes&lt;/p&gt;
&lt;p&gt;By the way this is the first chart that I have ever created with d3, and this silly thing is so exciting!!&lt;/p&gt;
&lt;h3&gt;Markup&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chart1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;chart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;152&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#chart1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;px&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Result&lt;/h3&gt;
&lt;div id="chart1" class='chart'&gt;
    &lt;div&gt;&lt;/div&gt;
    &lt;div&gt;&lt;/div&gt;
    &lt;div&gt;&lt;/div&gt;
    &lt;div&gt;&lt;/div&gt;
    &lt;div&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
    const data = [90, 270, 152, 42, 83]
    d3.select('#chart1')
        .selectAll('div')
        .data(data)
        .attr('class', 'bar')
        .style('width', function (d) {
            return d + 'px'
        })
&lt;/script&gt;

&lt;h2&gt;Example 2&lt;/h2&gt;
&lt;p&gt;This time we are going to get a bit more dynamic.  The divs will be generated on the fly and will update with the press of a button.&lt;/p&gt;
&lt;h3&gt;Markup&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chart2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;chart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;math&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;render(&amp;#39;math&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Math&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;science&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;render(&amp;#39;science&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Science&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;James&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Steve&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jordan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#chart2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#chart2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#chart2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;px&amp;#39;&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;math&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Result&lt;/h3&gt;
&lt;div id="chart2" class='chart'&gt;
    &lt;button class='math' onclick="render('math')"&gt;Math&lt;/button&gt;
    &lt;button class='science' onclick="render('science')"&gt;Science&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
    const data2 = [
        { name: 'Alice', math: 93, science: 84},
        { name: 'Bob', math: 73, science: 82},
        { name: 'James', math: 92, science: 78},
        { name: 'Steve', math: 77, science: 93},
        { name: 'Jordan', math: 80, science: 68},
    ]

    function render(subject) {
        d3.select('#chart2')
            .selectAll('button')
            .classed('on', false)
        d3.select('.' + subject)
            .attr('class', subject + ' on')
        d3.select('#chart2')
            .selectAll('div')
            .remove()
        d3.select('#chart2')
            .selectAll('div')
            .data(data2)
            .enter()
                .append('div')
                .attr('class', 'bar')
                .style('width', function(d) {
                     return (d[subject]-50)*3 + 'px'
                    })
    }
    render('math')
&lt;/script&gt;

&lt;h2&gt;Example 3&lt;/h2&gt;
&lt;p&gt;In Example2 the chart jumped from one state to the next with a complete wipe and redraw in betweeen.  In this example we will retain the same bars and only update their width.  This will allow us to transition/animate them.&lt;/p&gt;
&lt;h3&gt;Markup&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chart3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;chart&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;math&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;render3(&amp;#39;math&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Math&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;science&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;render3(&amp;#39;science&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Science&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;James&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Steve&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jordan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;science&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#chart3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#chart3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#chart3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newBars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;newBars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;px&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;render3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;math&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div id="chart3" class='chart'&gt;
    &lt;button class='math' onclick="render3('math')"&gt;Math&lt;/button&gt;
    &lt;button class='science' onclick="render3('science')"&gt;Science&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
    const data3 = [
        { name: 'Alice', math: 93, science: 84 },
        { name: 'Bob', math: 73, science: 82 },
        { name: 'James', math: 92, science: 78 },
        { name: 'Steve', math: 77, science: 93 },
        { name: 'Jordan', math: 80, science: 68 },
    ]

    function render3(subject) {
        d3.select('#chart3')
            .selectAll('button')
            .classed('on', false)
        d3.select('#chart3')
            .select('.' + subject)
            .attr('class', subject + ' on')

        const bars = d3.select('#chart3')
            .selectAll('div')
            .data(data3, function(d) {
                return d.name
            })
        const newBars = bars.enter()
            .append('div')
                .attr('class', 'bar')
                .style('width', 0)
        newBars.merge(bars)
            .transition()
            .style('width', function(d) {
                return (d[subject]-50)*3 + 'px'
            })
    }
    render3('math')
&lt;/script&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I express how fun this was.  I have always viewed d3 as something so low level I would never be able to touch.  The tutorial was super fun and very approachable.  Any other resources that I have seen to start learning d3 appear to be very time consuming before you start writing code and digging into it yourself. These examples were great, I was able to get started creating visualizations in no more than 5 minutes of reading.  Now that I feel like I have a shallow understanding of how it works I feel better prepared to dive in.&lt;/p&gt;</content><category term="D3"></category><category term="Viz"></category><category term="FrontEnd"></category></entry><entry><title>No More Death By PowerPoint</title><link href="www.waylonwalker.com/blog/no-more-death-by-powerpoint.html" rel="alternate"></link><published>2017-12-31T00:00:00-06:00</published><updated>2017-12-31T00:00:00-06:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2017-12-31:www.waylonwalker.com/blog/no-more-death-by-powerpoint.html</id><summary type="html">&lt;h1&gt;No More Death By PowerPoint&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I Waylon S. Walker vow that from this point forward I will no longer create powerpoints to be considerec &lt;strong&gt;DEATH BY POWERPOINT&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have not seen David JP Phillips &lt;a href="https://www.youtube.com/watch?v=Iwpi1Lm6dFo"&gt;Death By PowerPoint&lt;/a&gt;  TEDx, stop now and watch it.  You will never look at slides …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;No More Death By PowerPoint&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I Waylon S. Walker vow that from this point forward I will no longer create powerpoints to be considerec &lt;strong&gt;DEATH BY POWERPOINT&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have not seen David JP Phillips &lt;a href="https://www.youtube.com/watch?v=Iwpi1Lm6dFo"&gt;Death By PowerPoint&lt;/a&gt;  TEDx, stop now and watch it.  You will never look at slides the same again.  Watching this video ruined me for watching presentations with these issues.  Reveal is a tool that makes it very easy to follow these principles&lt;/p&gt;
&lt;p&gt;I currently work in a company that employs over 100K employees, and to this day I cannot recall a single presentation given where the slides did not violate the rules stated in David's Talk.  This year I am putting a stop to this starting with myself.  I am starting a new job role in 2018 and there is no better time to make some drastic changes to my workflow than now.  I expect there to be a few followers and many naysayers, but I dont care.  I will employ the directives listed below.&lt;/p&gt;
&lt;h2&gt;1+1=0&lt;/h2&gt;
&lt;p&gt;Very few people (&lt;em&gt;if any&lt;/em&gt;) in your will be able to multi-task.  The human brain is just not built to truly multi-task.  Some folks can be good at task switching quickly but very few of us can truly multi-task.  By overwhelming your audience with more than one distinct message, you have successfully overwhelmed your audience and successfully delivered 0 messages to your audiance.&lt;/p&gt;
&lt;h2&gt;6 items&lt;/h2&gt;
&lt;p&gt;The human brain is very capable of processing up to 6 items very efficiently, beyond this becomes an exponential rate of processing.  Watch David's video and you will see a remarkable example.&lt;/p&gt;
&lt;h2&gt;Size and Contrast&lt;/h2&gt;
&lt;p&gt;The most important points should be the fist thing that your eye goes to on the screen.  &lt;/p&gt;
&lt;h2&gt;More Slides&lt;/h2&gt;
&lt;p&gt;No one ever said the sheer amount of slides was ever the problem.&lt;/p&gt;
&lt;h2&gt;Supporting Material&lt;/h2&gt;
&lt;p&gt;Sentences, Notes, reference material, etc belong in the speaker notes.  This is the part that took the longest for me to realize.  In my company PowerPoint documents as living documents that folks will reference long after the presentation is over.  For this reason we tend to put every point that we want to discuss on the slides, so that they are there weeks, months, even years later when someone goes back to review your slides.  Placing this material in the speaker notes will allow you to utilize your presentation as reference material if you need to, and refrain from placing it on the screen.&lt;/p&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;A tool that is becoming very popular outside of the PowerPoind world is &lt;a href="https://github.com/hakimel/reveal.js/"&gt;Reveal js&lt;/a&gt;.  It is a fantastic framework to build beautiful slides using html.  I find that maintaining html to be a bit cumbersome. And the templating language &lt;a href="https://pugjs.org/"&gt;pug&lt;/a&gt; to be much more simple.  I will be using my own fork of &lt;a href="https://github.com/jlengstorf/reveal.js-jade"&gt;reveal.js-jade&lt;/a&gt; in 2018.  It will allow me to have interactive visualizations right in my slides.  Reveal also does a really nice job at making it hard to break the Death By PowerPoint rules.  It tends to be hard to jam a ton of information into them.&lt;/p&gt;</content><category term="Pug"></category><category term="Jade"></category><category term="Reveal"></category></entry><entry><title>background tasks in python</title><link href="www.waylonwalker.com/blog/background-tasks-in-python.html" rel="alternate"></link><published>2017-09-16T00:00:00-05:00</published><updated>2017-09-16T00:00:00-05:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2017-09-16:www.waylonwalker.com/blog/background-tasks-in-python.html</id><summary type="html">&lt;h1&gt;background tasks in python&lt;/h1&gt;
&lt;p&gt;I have tried most of the different methods in the past and found that copying and pasting the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example"&gt;threadpoolexecutor example&lt;/a&gt; or the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example"&gt;processpoolexecutor example&lt;/a&gt; from the standard library documentation to be the most reliable.  Since this is often something that I stuff in the back of …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;background tasks in python&lt;/h1&gt;
&lt;p&gt;I have tried most of the different methods in the past and found that copying and pasting the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example"&gt;threadpoolexecutor example&lt;/a&gt; or the &lt;a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example"&gt;processpoolexecutor example&lt;/a&gt; from the standard library documentation to be the most reliable.  Since this is often something that I stuff in the back of a utility module of a library it is not something that I write often enough to be familiar with, which makes it both hard to write and hard to read and debug.  If you are looking for a good overview of the difference concurrency &lt;a href="https://twitter.com/raymondh"&gt;Raymond Hettinger&lt;/a&gt; has a great talk about the difference between the various different methods, when to use them and why.&lt;/p&gt;
&lt;p&gt;Recently a new python library was released to make running tasks in the background very simple. The &lt;a href="https://github.com/kennethreitz/background"&gt;background&lt;/a&gt; project by Kenneth Reitz is a high level implementation of python 3's ThreadPoolExecutor.  I have been playing around with this project over the last week and I will say that this is definitely the simplest way to run background tasks in python by far.  It really simplifes the syntax and lets me focus on my job rather than implementing custom concurrent code that is more difficult to debug.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;I have pulled the latest version of the project in Sept 2017.  I found that it had some updates that were important to pass *args and **kwargs compared to the pypi version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;background&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;bg&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;load_ext&lt;/span&gt; &lt;span class="n"&gt;watermark&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;watermark&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2017-09-16

CPython 3.6.2
IPython 6.1.0

background n
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Define Worker Functions&lt;/h2&gt;
&lt;p&gt;Each of these worker functions takes 1s to run, simulating a moderately long calculation that we need to do many times over.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;work&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nd"&gt;@bg.task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bg_work&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Run the Worker Functions&lt;/h2&gt;
&lt;h2&gt;Blocking function&lt;/h2&gt;
&lt;p&gt;This function is blocking each time the function runs, thus taking 1 second to run for each calculation.  The example below took exactly &lt;strong&gt;100 s&lt;/strong&gt; to run 100 calculations.  Depending on your use case this may not be fast enough.  If the calculations do not rely on the global state&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Wall time: 1min 40s
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reaction&lt;/h3&gt;
&lt;p&gt;I  know what half of you are saying to yourselfs..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;!!What!! that took 100 s, by now my users have already sent a dozen messages and filed an issue that my feature is down&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the other half&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seriously that wasnt even enough time to grab a coffee.  Any real time consuming analysis takes at least 3 dats 14 hours 159 seconds before I start to care about concurrency&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To you I say... I am impatient and I got other things to do rather than wait on this maching to finish its work.  Let's get into this concurrency stuff.&lt;/p&gt;
&lt;h2&gt;Background Function&lt;/h2&gt;
&lt;p&gt;This function spins off worker processes and runs much faster.  By default background sets the number of processes to the number of cpu cores available, Therefore this function should run in n/4 + (inefficiency).  Here we see that the result is just over &lt;strong&gt;13 s&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note:&lt;em&gt;Since there is a bit of inefficiency added by needing to handle all of the threads it is not exactly divided by the number of workers.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="n"&gt;f_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bg_work&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f_list&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Wall time: 13.1 s
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reaction&lt;/h3&gt;
&lt;p&gt;I know what your saying this time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;really a 7.6x improvement...  Is that really even woth the extra work.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fine then lets crank it up to 11!&lt;/p&gt;
&lt;h3&gt;Lots of Background&lt;/h3&gt;
&lt;p&gt;lets set the number of background processes to a value just higher to than the number of workers we need to run in order to start them all simultaneously. With this simple example that is not very CPU intensive we see the result is just over the amount of time that it takes to run 1 worker. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="n"&gt;f_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bg_work&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f_list&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Wall time: 1.09 s
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reaction&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;91x improvement by putting my calculations into a function, adding a decorator, and some checks, im in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;On Tap&lt;/h2&gt;
&lt;p&gt;This week while taking it up to 11 I was enjoying a super thick and rich cup of El Salvador Finca Rosa from Onyx Coffee Labs.  Check out their love for letting the bean speak for it self and producing a great cup.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://onyxcoffeelab.com"&gt;&lt;img src="https://cdn.shopify.com/s/files/1/1707/3261/files/coffee_science.png?5305428688827820856"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Data Science"></category></entry><entry><title>Pycon 2017 Roundup</title><link href="www.waylonwalker.com/blog/pycon-2017-roundup.html" rel="alternate"></link><published>2017-05-30T00:00:00-05:00</published><updated>2017-05-30T00:00:00-05:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2017-05-30:www.waylonwalker.com/blog/pycon-2017-roundup.html</id><summary type="html">&lt;h1&gt;Pycon 2017 Roundup&lt;/h1&gt;
&lt;p&gt;Good afternoon fellow Data Geeks.  Last week &lt;a href="https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg"&gt;Pycon&lt;/a&gt; released 141 videos of greatness.  Here are my top picks from the event.&lt;/p&gt;
&lt;h2&gt;#3 Kelsey Hightower - Keynote - Pycon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=u_iAXzy3xBA&amp;amp;t=1795s" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/u_iAXzy3xBA/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;#2 Al Sweigart Yes, It's Time to Learn Regular Expressions PyCon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=abrcJ9MpF60" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/abrcJ9MpF60/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;#1 Trey Hunner Readability Counts PyCon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=knMg6G9_XCg" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/knMg6G9_XCg/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What's …&lt;/h2&gt;</summary><content type="html">&lt;h1&gt;Pycon 2017 Roundup&lt;/h1&gt;
&lt;p&gt;Good afternoon fellow Data Geeks.  Last week &lt;a href="https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg"&gt;Pycon&lt;/a&gt; released 141 videos of greatness.  Here are my top picks from the event.&lt;/p&gt;
&lt;h2&gt;#3 Kelsey Hightower - Keynote - Pycon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=u_iAXzy3xBA&amp;amp;t=1795s" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/u_iAXzy3xBA/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;#2 Al Sweigart Yes, It's Time to Learn Regular Expressions PyCon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=abrcJ9MpF60" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/abrcJ9MpF60/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;#1 Trey Hunner Readability Counts PyCon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=knMg6G9_XCg" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/knMg6G9_XCg/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What's on Tap&lt;/h2&gt;
&lt;p&gt;This afternoon we have a cup of from one of my favorite roasters Thirty Thiry Coffee.  This &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thirty-thirtycoffee.com/" title="Whats on Tap"&gt;&lt;img alt="Whats on Tap" src="http://www.thirty-thirtycoffee.com/wp-content/uploads/2016/09/thirty-thirty-peoria-logo.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Pycon"></category><category term="Youtube"></category></entry></feed>