<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>WaylonWalker - Blog</title><link href="www.waylonwalker.com/blog/" rel="alternate"></link><link href="www.waylonwalker.com/blog/feeds/blog.atom.xml" rel="self"></link><id>www.waylonwalker.com/blog/</id><updated>2018-05-12T00:00:00-05:00</updated><entry><title>Pycon 2018 Roundup</title><link href="www.waylonwalker.com/blog/pycon-2018-roundup.html" rel="alternate"></link><published>2018-05-12T00:00:00-05:00</published><updated>2018-05-12T00:00:00-05:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2018-05-12:www.waylonwalker.com/blog/pycon-2018-roundup.html</id><summary type="html">&lt;p&gt;These are my notes from pycon 2018 videos.  I love the python community and especially the conference talks.  This year I am going to take some notes from my favorite talks and post them here.&lt;/p&gt;</summary><content type="html">&lt;p&gt;These are my notes from pycon 2018 videos.  I love the python community and especially the conference talks.  This year I am going to take some notes from my favorite talks and post them here.&lt;/p&gt;
&lt;p&gt;This is an &lt;strong&gt;Incomplete&lt;/strong&gt; working post.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=zQeYx87mfyw"&gt;Jake VanderPlas - Performance Python: Seven Strategies for Optimizing Your Numerical Code&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Always&lt;/strong&gt; profile &lt;strong&gt;before&lt;/strong&gt; making any optimizations.&lt;/li&gt;
&lt;li&gt;Vectorize with Numpy&lt;ul&gt;
&lt;li&gt;Looping in python can be slow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use specialized data structures.&lt;ul&gt;
&lt;li&gt;scipy.spacial&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;li&gt;xarray&lt;/li&gt;
&lt;li&gt;scipy.sparse&lt;/li&gt;
&lt;li&gt;sparse package&lt;/li&gt;
&lt;li&gt;scipy.sparce.csgraph &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cython&lt;ul&gt;
&lt;li&gt;Add types&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numba&lt;ul&gt;
&lt;li&gt;jit&lt;/li&gt;
&lt;li&gt;Fortran Like Speed&lt;/li&gt;
&lt;li&gt;heavy dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dask&lt;ul&gt;
&lt;li&gt;distributed tasks&lt;/li&gt;
&lt;li&gt;Can be executed locally or on a cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Look for an existing package&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resist the urge to reinvent the wheel&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zQeYx87mfyw"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/zQeYx87mfyw/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=q-x7jK72E6E"&gt;Jason Huggins - Keynote &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jason had a great talk about teaching kids to code through his experiences with First Lego League.  He found that the event has the best of intentions, but does lend itself to schools with a larger budget that is able to order many different kits.  He has found himself deep down a rabbit hole of finding an affordable alternative that can be done with the inexpensive raspbery pi zero, and controlled  with the cheapest tablets.  He is currently working on a programming language called wildcard, that can be programmed with paper.  This really reminds me of a game that I play with my 5 year old son &lt;a href="www.robotturtles.com"&gt;Robot Turtles&lt;/a&gt;.  He really likes to play it.  I will definitely be following this project to see if this is something that I can do with him when its ready.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=q-x7jK72E6E"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/q-x7jK72E6E/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=ITksU31c1WY"&gt;Dan Callahan - Keynote - PyCon 2018&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was a bit sad when I was looking through the list of PyCon 2018 talks and did not see anything that appeared to talk about web assembly, but hidden in Dan Callagan's keynote was a great story about web assembly and what it means to python.  Dan's keynote was a great story about using the best tools available to you.  He goes back to his childhood where he programmed in basic because thats what he could take with him away from the desktop on his TI-82.  In modern times we have so many platforms other than desktop, and new ones comming out so frequently that its impossible to see what the next one will be.  There are even computers in refrigerators today.  The one thing that seems to be common is that they all have a web browser.  With that we can write web apps with python, but we are still missing the JavaScript dominated client side story.  Dan shows that this is changing with web assembly.  He showed examples where Autodesk compiled Autocad to wasm, and can run it in the browser!!  He showed versions of windows 3 running completely inside of firefox.  While it is currenly not realistic to compile python to web assembly as it creates large file sizes, it is possible and he sees a bright future for python in the browser.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ITksU31c1WY"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/ITksU31c1WY/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=DlgG0QdrqAU"&gt;Alex Petralia - Analyzing Data: What pandas and SQL Taught Me About Taking an Average&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Asks the right questions before writing the first line of code.  Even the simplest questions such as averages have many possible pitfalls along the way.  Alex discusses how to prepare your data before averaging in this talk.  He brings some new &lt;em&gt;"Jargon"&lt;/em&gt; .  I am not sure that this jargon made this any easier for me to understand or discuss.  It may take some time for this one to sink in to become effective.  I feel like using plain english is more effective as it is more easily understood by anyone.  "find the &lt;strong&gt;daily&lt;/strong&gt; average &lt;strong&gt;sales&lt;/strong&gt; by &lt;strong&gt;seller&lt;/strong&gt;"&lt;/p&gt;
&lt;h3&gt;Jargon&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Collapsing key:&lt;/strong&gt; 
&lt;em&gt; the collapsed/aggregated data relevant to this analysis&lt;br&gt;
&lt;/em&gt; &lt;em&gt;we are overriding the primary key (i.e. what a table defines as an observation)&lt;/em&gt;
* the original number of rows&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grouping key:&lt;/strong&gt; the key defining a group&lt;em&gt;&lt;em&gt;&lt;br&gt;
&lt;/em&gt; &lt;em&gt;eg. "for each Seller" is (seller), "for each Country and city is (Country, City)&lt;/em&gt;&lt;br&gt;
&lt;/em&gt; this defines how many rows are in the result&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Obvervation key: a unit of observation for this analysis&lt;/strong&gt;&lt;br&gt;
&lt;em&gt; &lt;em&gt;eg. "daily average" is (Date), "across regions" is (Region)&lt;/em&gt;
&lt;/em&gt; this defines how many rows are in the denominator&lt;/p&gt;
&lt;h3&gt;Formula&lt;/h3&gt;
&lt;p&gt;Collapsing Key - Grouping Key = Observation Key&lt;/p&gt;
&lt;h3&gt;Example Question&lt;/h3&gt;
&lt;p&gt;Calculate the Average Daily Sales for each Seller.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collapsing Key:&lt;/strong&gt; (Date, Seller)
&lt;strong&gt;Grouping Key:&lt;/strong&gt; (Seller)
&lt;strong&gt;Observation Key:&lt;/strong&gt; (Date)&lt;/p&gt;
&lt;h3&gt;data set&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Seller&lt;/th&gt;
&lt;th&gt;ApplesSold&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Monday&lt;/td&gt;
&lt;td&gt;Mary&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Monday&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Tuesday&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Thursday&lt;/td&gt;
&lt;td&gt;Jane&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Thursday&lt;/td&gt;
&lt;td&gt;Jane&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;SQL Example&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;Seller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
       &lt;span class="nb"&gt;DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;SELLER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApplesSold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt;
       &lt;span class="n"&gt;Apples&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
       &lt;span class="nb"&gt;DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;SELLER&lt;/span&gt; &lt;span class="c1"&gt;-- Collapsing Key&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
    &lt;span class="n"&gt;Seller&lt;/span&gt; &lt;span class="c1"&gt;-- Grouping Key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pandas Example&lt;/h3&gt;
&lt;p&gt;I am interested in trying out this technique of using the second groupby.  I typically use an unstack instead, but that relies on having the order of the Collapsing key correct.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Seller&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Collapsing Key&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ApplesSold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Seller&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Grouping Key&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=DlgG0QdrqAU"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/DlgG0QdrqAU/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Pycon"></category><category term="Youtube"></category></entry><entry><title>Stepping Up My SQL Game</title><link href="www.waylonwalker.com/blog/stepping-up-my-sql-game.html" rel="alternate"></link><published>2018-03-25T00:00:00-05:00</published><updated>2018-03-25T00:00:00-05:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2018-03-25:www.waylonwalker.com/blog/stepping-up-my-sql-game.html</id><summary type="html">&lt;p&gt;I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed.&lt;/p&gt;</summary><content type="html">&lt;!-- COMMON TAGS --&gt;

&lt;p&gt;&lt;meta charset="utf-8"&gt;
&lt;title&gt;Stepping Up My SQL Game&lt;/title&gt;
&lt;!-- Search Engine --&gt;
&lt;meta name="description" content="I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed."&gt;
&lt;meta name="image" content="http://www.waylonwalker.com/static/images/blog/sql.png"&gt;
&lt;!-- Schema.org for Google --&gt;
&lt;meta itemprop="name" content="Stepping Up My SQL Game"&gt;
&lt;meta itemprop="description" content="I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed."&gt;
&lt;meta itemprop="image" content="http://www.waylonwalker.com/static/images/blog/sql.png"&gt;
&lt;!-- Twitter --&gt;
&lt;meta name="twitter:card" content="summary"&gt;
&lt;meta name="twitter:title" content="Stepping Up My SQL Game"&gt;
&lt;meta name="twitter:description" content="I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed."&gt;
&lt;meta name="twitter:site" content="@_waylonwalker"&gt;
&lt;meta name="twitter:creator" content="@_waylonwalker"&gt;
&lt;meta name="twitter:image:src" content="http://www.waylonwalker.com/static/images/blog/sql.png"&gt;
&lt;!-- Open Graph general (Facebook, Pinterest &amp; Google+) --&gt;
&lt;meta name="og:title" content="Stepping Up My SQL Game"&gt;
&lt;meta name="og:description" content="I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed."&gt;
&lt;meta name="og:image" content="http://www.waylonwalker.com/static/images/blog/sql.png"&gt;
&lt;meta name="og:url" content="http://www.waylonwalker.com/blog/stepping-up-my-sql.html"&gt;
&lt;meta name="og:site_name" content="waylonwalker.com"&gt;
&lt;meta name="og:type" content="website"&gt;&lt;/p&gt;
&lt;h1&gt;Stepping up my SQL game&lt;/h1&gt;
&lt;p&gt;In 2018 I transitioned from a Product Engineering (Mechanical) role to a Data Scientist Role.  I entered this space with strong subject matter expertise with our products, our data, munging through data in pyhon, and data visualization in python.  My sql skills were lacking to say the least.  I had learned what I needed to know to get data from our relational databases, then use pandas to do any further analysis.    Just run something like the following and you have data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="k"&gt;Table&lt;/span&gt; 
&lt;span class="k"&gt;Where&lt;/span&gt; 
    &lt;span class="n"&gt;col_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;col_1_filter&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This technique works great for small data sets that you only need to run once.  There is no shame to pull in a big dataset and start munging with it in pandas to get some results, and make decisions.  The problem becomes when your dataset becomes too big or you need to run the query on a frequent basis.  Doing the aggregations on the server run much quicker, as it reduces the time spent in io.  My longest running steps are currently io related.  Reducing these steps have improved my workflow.  At the point that I was getting server timeout errors, or using the same long running query in many places I would be searching for examples online, because I just did not have the experience with many more techniques.  I decided it was time to put away the cheat sheets, step away from Stack Overflow, and improve my speed.&lt;/p&gt;
&lt;h2&gt;Why Learn SQL in 2018??&lt;/h2&gt;
&lt;p&gt;SQL is far from the hot topic in 2018, AI, Deep Learning, BIG data, Machine Learning, Natural Language Processing take the win here.  SQL is so simple why would anyone want to spend time learning SQL?  The reason... all of those hot topics in 2018 require data.  My data mostly comes from relational databases which require sql to get data from them.  Without the ability to efficiently get the data I need to do an aanlysis I cannot even start.  Sure I could use an ORM, but I found that to be a bit unwieldy with the thousands of tables  we have in formats that were determined many years ago. Plus raw SQL is more transportable.  I commonly collaborate with other folks who do not use python.  I am proud that I am able to point them to the SQL I use rather than telling them to suck it up an learn python.  I truly believe that people are the most effective when they are able to choose their own stack of tools.  Taking some time to focus on the basics of Data Science will help be build a strong foundation for my career.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://campus.datacamp.com/courses/joining-data-in-postgresql"&gt;Joining Data in Posgres&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are my notes from the &lt;a href="https://campus.datacamp.com/courses/joining-data-in-postgresql"&gt;Joining Data in Posgres&lt;/a&gt;
course on DataCamp.  I will use these notes as a refresher when I need a quick reference.&lt;/p&gt;
&lt;h3&gt;Using()&lt;/h3&gt;
&lt;p&gt;When joining two tables on the same column the &lt;code&gt;USING&lt;/code&gt; clause can be used as a shorthand.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;without using&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 

&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;Table1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;

&lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; 
    &lt;span class="n"&gt;Table2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;with using&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="o"&gt;*&lt;/span&gt; 

&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;Table1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;

&lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; 
    &lt;span class="n"&gt;Table2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;
    &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Join Types&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;for joining columns of data together into a single table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;INNER&lt;/code&gt;: Includes only records contained in &lt;strong&gt;both&lt;/strong&gt; tables.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RIGHT&lt;/code&gt;: Inlcudes all records from the &lt;strong&gt;right&lt;/strong&gt;, droping values from the left if non-existent in the right, or leaving nulls if non-existant in the left.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LEFT&lt;/code&gt;: Inlcudes all records from the &lt;strong&gt;left&lt;/strong&gt;, droping values from the right if non-existent in the left, or leaving nulls if non-existant in the right.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FULL&lt;/code&gt;: Combination of &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; Join, leaving nulls where data is missing in one table, and not droping any data.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CROSS&lt;/code&gt;: returns all &lt;strong&gt;pairs&lt;/strong&gt; from two tables, does not have an on or using clause.&lt;/p&gt;
&lt;h3&gt;Union&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;for concatenating rows of data with the same columns&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Union&lt;/code&gt;: returns only unique records, does not include duplicates.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Union All&lt;/code&gt;: returns all records(including duplicates)&lt;/p&gt;
&lt;h3&gt;Intersect&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Intersect&lt;/code&gt;: returns only records appearing in both tables&lt;/p&gt;
&lt;h3&gt;Execpt&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Except&lt;/code&gt;: returns only records not in the second table&lt;/p&gt;
&lt;h3&gt;Self-Joins&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Semi-Join&lt;/code&gt;: Filters based on results of a subquery.  Does not have direct sql syntax.  This type of join is achieved through a subquery in the where statement.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Anti-Join&lt;/code&gt;: Similar to the Semi-join, but using a &lt;code&gt;not&lt;/code&gt; modifier.  This is particularly useful for debugging situations.&lt;/p&gt;
&lt;h3&gt;Subqueries&lt;/h3&gt;
&lt;p&gt;This is where I have really stepped up my sql game.  I was able to get practice writing more complex queries. I also learned about different methods of joining tables together.&lt;/p&gt;
&lt;h4&gt;WHERE&lt;/h4&gt;
&lt;p&gt;Subqueries are commonly found in the where clause to filter data.  Below is an example given in the course to select only the Asian countries with below average fertility rate from the states table. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
   &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;fert_rate&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;states&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; 
    &lt;span class="n"&gt;continent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;fert_rate&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;AVG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fert_rate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;SELECT&lt;/h4&gt;
&lt;p&gt;Subqueries can be found in the &lt;code&gt;SELECT&lt;/code&gt; clause to create new columns of data.  This is a different technique than I have used in the past.  Previously I have only used &lt;code&gt;GROUPBY&lt;/code&gt; statements to get this effect.  I can see where this can be really useful because it is not constrained by aggregations any data point can be pulled in with this tecnhique.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt;
    &lt;span class="n"&gt;continent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
        &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;FROM&lt;/span&gt; 
        &lt;span class="n"&gt;states&lt;/span&gt;
     &lt;span class="k"&gt;WHERE&lt;/span&gt; 
        &lt;span class="n"&gt;prime_ministers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;continent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;continent&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;countries_num&lt;/span&gt;

&lt;span class="k"&gt;From&lt;/span&gt; &lt;span class="n"&gt;Prime&lt;/span&gt; &lt;span class="n"&gt;Ministers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;FROM&lt;/h4&gt;
&lt;p&gt;subqueries found in the &lt;code&gt;FROM&lt;/code&gt; clause can be very helpful to create a new dataset from an existing table.  I find these the easiest to read as it is not much different than creating a new table.  Again this can be very powerful in creating new columns that were not easily available otherwise.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt;
    &lt;span class="n"&gt;monarchs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;continent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;subquery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_perc&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;
    &lt;span class="n"&gt;monarchs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;continent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;women_parli_perc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;max_perc&lt;/span&gt;

    &lt;span class="k"&gt;FROM&lt;/span&gt;
        &lt;span class="n"&gt;states&lt;/span&gt;

    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; 
        &lt;span class="n"&gt;continent&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;subquery&lt;/span&gt;

&lt;span class="k"&gt;WHERE&lt;/span&gt;
    &lt;span class="n"&gt;monarchs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;continent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subquery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;continent&lt;/span&gt;

&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
    &lt;span class="n"&gt;continent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;ON&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Challenge Problem 1&lt;/strong&gt;  This problem was the one that had me more stumped than any other problem in the course.  I found the subquery inside the on statement very confusing to understand.  In this question we are joining the countries table to a subquery what yields country codes of countries with offial languages from the languages table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt;
    &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_investment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imports&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;countries&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;
&lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; 
    &lt;span class="n"&gt;economies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;

    &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; 
        &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; 
    &lt;span class="k"&gt;FROM&lt;/span&gt; 
        &lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; 
        &lt;span class="n"&gt;official&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;WHERE&lt;/span&gt; 
    &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Central America&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;

&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; 
    &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;asc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check out more content from me at &lt;a href="http://waylonwalker.com/blog"&gt;my blog&lt;/a&gt;&lt;/p&gt;</content><category term="Data"></category><category term="SQL"></category><category term="Learning"></category></entry><entry><title>No More Death By PowerPoint</title><link href="www.waylonwalker.com/blog/no-more-death-by-powerpoint.html" rel="alternate"></link><published>2017-12-31T00:00:00-06:00</published><updated>2017-12-31T00:00:00-06:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2017-12-31:www.waylonwalker.com/blog/no-more-death-by-powerpoint.html</id><summary type="html">&lt;h1&gt;No More Death By PowerPoint&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I Waylon S. Walker vow that from this point forward I will no longer create powerpoints to be considerec &lt;strong&gt;DEATH BY POWERPOINT&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have not seen David JP Phillips &lt;a href="https://www.youtube.com/watch?v=Iwpi1Lm6dFo"&gt;Death By PowerPoint&lt;/a&gt;  TEDx, stop now and watch it.  You will never look at slides …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;No More Death By PowerPoint&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I Waylon S. Walker vow that from this point forward I will no longer create powerpoints to be considerec &lt;strong&gt;DEATH BY POWERPOINT&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have not seen David JP Phillips &lt;a href="https://www.youtube.com/watch?v=Iwpi1Lm6dFo"&gt;Death By PowerPoint&lt;/a&gt;  TEDx, stop now and watch it.  You will never look at slides the same again.  Watching this video ruined me for watching presentations with these issues.  Reveal is a tool that makes it very easy to follow these principles&lt;/p&gt;
&lt;p&gt;I currently work in a company that employs over 100K employees, and to this day I cannot recall a single presentation given where the slides did not violate the rules stated in David's Talk.  This year I am putting a stop to this starting with myself.  I am starting a new job role in 2018 and there is no better time to make some drastic changes to my workflow than now.  I expect there to be a few followers and many naysayers, but I dont care.  I will employ the directives listed below.&lt;/p&gt;
&lt;h2&gt;1+1=0&lt;/h2&gt;
&lt;p&gt;Very few people (&lt;em&gt;if any&lt;/em&gt;) in your will be able to multi-task.  The human brain is just not built to truly multi-task.  Some folks can be good at task switching quickly but very few of us can truly multi-task.  By overwhelming your audience with more than one distinct message, you have successfully overwhelmed your audience and successfully delivered 0 messages to your audiance.&lt;/p&gt;
&lt;h2&gt;6 items&lt;/h2&gt;
&lt;p&gt;The human brain is very capable of processing up to 6 items very efficiently, beyond this becomes an exponential rate of processing.  Watch David's video and you will see a remarkable example.&lt;/p&gt;
&lt;h2&gt;Size and Contrast&lt;/h2&gt;
&lt;p&gt;The most important points should be the fist thing that your eye goes to on the screen.  &lt;/p&gt;
&lt;h2&gt;More Slides&lt;/h2&gt;
&lt;p&gt;No one ever said the sheer amount of slides was ever the problem.&lt;/p&gt;
&lt;h2&gt;Supporting Material&lt;/h2&gt;
&lt;p&gt;Sentences, Notes, reference material, etc belong in the speaker notes.  This is the part that took the longest for me to realize.  In my company PowerPoint documents as living documents that folks will reference long after the presentation is over.  For this reason we tend to put every point that we want to discuss on the slides, so that they are there weeks, months, even years later when someone goes back to review your slides.  Placing this material in the speaker notes will allow you to utilize your presentation as reference material if you need to, and refrain from placing it on the screen.&lt;/p&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;A tool that is becoming very popular outside of the PowerPoind world is &lt;a href="https://github.com/hakimel/reveal.js/"&gt;Reveal js&lt;/a&gt;.  It is a fantastic framework to build beautiful slides using html.  I find that maintaining html to be a bit cumbersome. And the templating language &lt;a href="https://pugjs.org/"&gt;pug&lt;/a&gt; to be much more simple.  I will be using my own fork of &lt;a href="https://github.com/jlengstorf/reveal.js-jade"&gt;reveal.js-jade&lt;/a&gt; in 2018.  It will allow me to have interactive visualizations right in my slides.  Reveal also does a really nice job at making it hard to break the Death By PowerPoint rules.  It tends to be hard to jam a ton of information into them.&lt;/p&gt;</content><category term="Pug"></category><category term="Jade"></category><category term="Reveal"></category></entry><entry><title>Pycon 2017 Roundup</title><link href="www.waylonwalker.com/blog/pycon-2017-roundup.html" rel="alternate"></link><published>2017-05-30T00:00:00-05:00</published><updated>2017-05-30T00:00:00-05:00</updated><author><name>Waylon Walker</name></author><id>tag:None,2017-05-30:www.waylonwalker.com/blog/pycon-2017-roundup.html</id><summary type="html">&lt;h1&gt;Pycon 2017 Roundup&lt;/h1&gt;
&lt;p&gt;Good afternoon fellow Data Geeks.  Last week &lt;a href="https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg"&gt;Pycon&lt;/a&gt; released 141 videos of greatness.  Here are my top picks from the event.&lt;/p&gt;
&lt;h2&gt;#3 Kelsey Hightower - Keynote - Pycon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=u_iAXzy3xBA&amp;amp;t=1795s" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/u_iAXzy3xBA/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;#2 Al Sweigart Yes, It's Time to Learn Regular Expressions PyCon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=abrcJ9MpF60" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/abrcJ9MpF60/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;#1 Trey Hunner Readability Counts PyCon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=knMg6G9_XCg" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/knMg6G9_XCg/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What's …&lt;/h2&gt;</summary><content type="html">&lt;h1&gt;Pycon 2017 Roundup&lt;/h1&gt;
&lt;p&gt;Good afternoon fellow Data Geeks.  Last week &lt;a href="https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg"&gt;Pycon&lt;/a&gt; released 141 videos of greatness.  Here are my top picks from the event.&lt;/p&gt;
&lt;h2&gt;#3 Kelsey Hightower - Keynote - Pycon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=u_iAXzy3xBA&amp;amp;t=1795s" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/u_iAXzy3xBA/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;#2 Al Sweigart Yes, It's Time to Learn Regular Expressions PyCon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=abrcJ9MpF60" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/abrcJ9MpF60/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;#1 Trey Hunner Readability Counts PyCon 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=knMg6G9_XCg" title="Click to Watch"&gt;&lt;img alt="Click to Watch" src="http://img.youtube.com/vi/knMg6G9_XCg/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What's on Tap&lt;/h2&gt;
&lt;p&gt;This afternoon we have a cup of from one of my favorite roasters Thirty Thiry Coffee.  This &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thirty-thirtycoffee.com/" title="Whats on Tap"&gt;&lt;img alt="Whats on Tap" src="http://www.thirty-thirtycoffee.com/wp-content/uploads/2016/09/thirty-thirty-peoria-logo.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Pycon"></category><category term="Youtube"></category></entry></feed>